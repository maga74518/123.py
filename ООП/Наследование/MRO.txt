MRO (Method Resolution Order) в объектно-ориентированном программировании - это порядок, в котором Python ищет методы
 в иерархии наследования классов.

Когда вызывается метод для объекта класса, Python ищет метод сначала в самом классе, затем в родительском классе и так
 далее вверх по иерархии наследования, пока метод не будет найден или пока не будет достигнут корневой класс
  (обычно object).

MRO гарантирует, что при множественном наследовании классов в правильном порядке будут вызываться все методы, включая
 методы, определенные в родительских классах только один раз.

MRO можно определить с помощью метода mro() у класса. Например:

class A:
    pass

class B(A):
    pass

class C(A):
    pass

class D(B, C):
    pass

print(D.mro())  # [__main__.D, __main__.B, __main__.C, __main__.A, object]

В этом примере порядок поиска методов в классе D будет следующим: D, B, C, A, object. Если метод не будет найден в
 классе D, он будет искаться в классах B и C, затем в A, и, наконец, встроенном классе object.