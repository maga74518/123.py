1 Декоратор - это функция, которая принимает другую функцию в качестве аргумента и возвращает новую функцию.

2 Декораторы используются для изменения поведения функций без изменения кода функций.

3 Синтаксис декораторов в Python выглядит так:

python
Copy code
def my_decorator(func):
    def wrapper():
        print("Действия до вызова функции.")
        func()
        print("Действия после вызова функции.")
    return wrapper

@my_decorator
def my_function():
    print("Hello world")

4 В этом примере мы определили декоратор my_decorator, который принимает функцию func в качестве аргумента и возвращает
новую функцию wrapper. Внутри функции wrapper мы добавили новое поведение, которое выполняется до и после вызова функции func.

5 Чтобы использовать декоратор, мы просто добавляем его перед определением функции, используя синтаксис @my_decorator.
При вызове функции my_function(), она автоматически обернется в функцию wrapper, определенную в декораторе my_decorator.

6 Декораторы можно комбинировать, чтобы добавлять различные виды поведения к функциям. Например, мы можем определить два
декоратора: один для добавления логирования, а другой для проверки аргументов функции.

7 Декораторы могут принимать аргументы, что позволяет настраивать их поведение для конкретных случаев.

8 Декораторы можно использовать не только для функций, но и для классов и методов.

9 В Python есть несколько встроенных декораторов, таких как @staticmethod, @classmethod и @property.

10 При определении собственных декораторов следует учитывать возможные побочные эффекты, такие как изменение поведения
функции и потенциальная потеря информации об исходной функции.